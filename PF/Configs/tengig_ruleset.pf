set optimization normal
set timeout { adaptive.start 0, adaptive.end 0 }
set limit states 22000
set limit src-nodes 22000

# Make sure we don't lose control
mgmt_if = "em0" # Connected to our admin network.
set skip on $mgmt_if


#System aliases
  
loopback = "{ lo0 }"
WAN = "{ ix0 }"
LAN = "{ ix1 }"
#OPT1 = "{ em2 }"
IPsec = "{ enc0 }"

#SSH Lockout Table
table <sshlockout> persist
table <webConfiguratorlockout> persist
#Snort tables
table <snort2c>
table <virusprot>
#table <bogons> persist file "/etc/bogons"
table <vpn_networks> { 192.168.200.0/24 192.168.212.0/24 10.10.10.0/24 192.168.120.0/24 192.168.210.0/24 10.10.10.0/24 }
table <negate_networks> { 192.168.200.0/24 192.168.212.0/24 10.10.10.0/24 192.168.120.0/24 192.168.210.0/24 10.10.10.0/24 }

# User Aliases 
table <test> {   10.10.10.0/25 } 
test = "<test>"
 
# Gateways
#GWOPT1GW = " route-to ( em2 192.168.210.20 ) "
GWWAN_DHCP = " route-to ( $WAN 192.168.10.1 ) "
nGWWAN_DHCP6 = " route-to ( $WAN 192.168.10.1 ) "

 
set loginterface em0

set skip on pfsync0

scrub on $WAN all    fragment reassemble
scrub on $LAN all    fragment reassemble
#scrub on $OPT1 all    fragment reassemble


no nat proto carp
no rdr proto carp
nat-anchor "natearly/*"
nat-anchor "natrules/*"

binat on enc0 from 192.168.1.0/24 to 192.168.120.0/24 -> 10.10.10.0/24

# Outbound NAT rules (automatic)

# Subnets to NAT 
tonatsubnets	= "{ 127.0.0.0/8 192.168.1.0/24 10.10.200.0/24 }"
nat on $WAN  from $tonatsubnets to any port 500 -> 192.168.10.72/32  static-port
nat on $WAN  from $tonatsubnets to any -> 192.168.10.72/32 port 1024:65535  
#nat on $OPT1  from $tonatsubnets to any port 500 -> 192.168.210.1/32  static-port
#nat on $OPT1  from $tonatsubnets to any -> 192.168.210.1/32 port 1024:65535  

# Load balancing anchor
rdr-anchor "relayd/*"
# TFTP proxy
rdr-anchor "tftp-proxy/*"
# NAT Inbound Redirects
rdr on $LAN proto tcp from any to any port 443 -> 127.0.0.1 port 8080
no nat on $LAN proto tcp from $LAN to 192.168.1.0/24
nat on $LAN proto tcp from 192.168.1.0/24 to 127.0.0.1 port 443 -> $LAN

#rdr on em2 proto tcp from any to 192.168.210.1 port 53 -> 192.168.1.100
# UPnPd rdr anchor
rdr-anchor "miniupnpd"

anchor "relayd/*"
anchor "openvpn/*"
anchor "ipsec/*"
# block IPv4 link-local. Per RFC 3927, link local "MUST NOT" be forwarded by a routing device,
# and clients "MUST NOT" send such packets to a router. FreeBSD won't route 169.254./16, but
# route-to can override that, causing problems such as in redmine #2073
block in log quick from 169.254.0.0/16 to any
block in log quick from any to 169.254.0.0/16 
#---------------------------------------------------------------------------
# default deny rules
#---------------------------------------------------------------------------
block in log inet all  label "Default deny rule IPv4"
block out log inet all  label "Default deny rule IPv4"
block in log inet6 all  label "Default deny rule IPv6"
block out log inet6 all  label "Default deny rule IPv6"

# IPv6 ICMP is not auxilary, it is required for operation
# See man icmp6(4)
# 1    unreach         Destination unreachable
# 2    toobig          Packet too big
# 128  echoreq         Echo service request
# 129  echorep         Echo service reply
# 133  routersol       Router solicitation
# 134  routeradv       Router advertisement
# 135  neighbrsol      Neighbor solicitation
# 136  neighbradv      Neighbor advertisement
pass  quick inet6 proto ipv6-icmp from any to any icmp6-type {1,2,135,136}  keep state

# Allow only bare essential icmpv6 packets (NS, NA, and RA, echoreq, echorep)
pass out  quick inet6 proto ipv6-icmp from fe80::/10 to fe80::/10 icmp6-type {129,133,134,135,136} keep state
pass out  quick inet6 proto ipv6-icmp from fe80::/10 to ff02::/16 icmp6-type {129,133,134,135,136} keep state
pass in  quick inet6 proto ipv6-icmp from fe80::/10 to fe80::/10 icmp6-type {128,133,134,135,136} keep state
pass in  quick inet6 proto ipv6-icmp from ff02::/16 to fe80::/10 icmp6-type {128,133,134,135,136} keep state
pass in  quick inet6 proto ipv6-icmp from fe80::/10 to ff02::/16 icmp6-type {128,133,134,135,136} keep state

# We use the mighty pf, we cannot be fooled.
block log quick inet proto { tcp, udp } from any port = 0 to any 
block log quick inet proto { tcp, udp } from any to any port = 0 
block log quick inet6 proto { tcp, udp } from any port = 0 to any 
block log quick inet6 proto { tcp, udp } from any to any port = 0 

# Snort package
block log quick from <snort2c> to any label "Block snort2c hosts"
block log quick from any to <snort2c> label "Block snort2c hosts"
block in log quick proto carp from (self) to any
pass  quick proto carp 

# SSH lockout
block in log quick proto tcp from <sshlockout> to (self) port 22 label "sshlockout"

# webConfigurator lockout
block in log quick proto tcp from <webConfiguratorlockout> to (self) port 443 label "webConfiguratorlockout"
block in log quick from <virusprot> to any label "virusprot overload table"
# allow our DHCPv6 client out to the WAN
pass in  quick on $WAN proto udp from fe80::/10 port = 546 to fe80::/10 port = 546 label "allow dhcpv6 client in WAN"
pass in  quick on $WAN proto udp from any port = 547 to any port = 546 label "allow dhcpv6 client in WAN"
pass out  quick on $WAN proto udp from any port = 546 to any port = 547 label "allow dhcpv6 client out WAN"
antispoof log for $WAN 
# allow our DHCP client out to the WAN
pass in  on $WAN proto udp from any port = 67 to any port = 68 label "allow dhcp client out WAN"
pass out  on $WAN proto udp from any port = 68 to any port = 67 label "allow dhcp client out WAN"
# Not installing DHCP server firewall rules for WAN which is configured for DHCP.
antispoof log for $LAN 
# allow access to DHCP server on LAN
pass in  quick on $LAN proto udp from any port = 68 to 255.255.255.255 port = 67 label "allow access to DHCP server"
pass in  quick on $LAN proto udp from any port = 68 to 192.168.1.1 port = 67 label "allow access to DHCP server"
pass out  quick on $LAN proto udp from 192.168.1.1 port = 67 to any port = 68  label "allow access to DHCP server"
#antispoof log for $OPT1

# loopback
pass in  on $loopback inet all  label "pass IPv4 loopback"
pass out  on $loopback inet all label "pass IPv4 loopback"
pass in  on $loopback inet6 all label "pass IPv6 loopback"
pass out  on $loopback inet6 all label "pass IPv6 loopback"
# let out anything from the firewall host itself and decrypted IPsec traffic
pass out  inet all keep state allow-opts label "let out anything IPv4 from firewall host itself"
pass out  inet6 all keep state allow-opts label "let out anything IPv6 from firewall host itself"
pass out  route-to ( ix0 192.168.10.1 ) from 192.168.10.72 to !192.168.10.0/24 keep state allow-opts label "let out anything from firewall host itself"
#pass out  route-to ( em2 192.168.210.20 ) from 192.168.210.1 to !192.168.210.0/24 keep state allow-opts label "let out anything from firewall host itself"
pass out  on $IPsec all keep state label "IPsec internal host to host"
# make sure the user cannot lock himself out of the webConfigurator or SSH
pass in  quick on $LAN proto tcp from any to $LAN port { 443 80 22 } keep state label "anti-lockout rule"

# User-defined rules follow

anchor "userrules/*"
pass  in  quick  on $IPsec inet from any to any keep state  label "USER_RULE"
# array key "openvpn" does not exist for "" in array: {WAN LAN OPT1 IPsec } label "USER_RULE"
pass  in  quick  on $WAN reply-to ( ix0 192.168.10.1 ) inet from any to any  keep state  label "USER_RULE"
pass  in  quick  on $LAN inet from 192.168.1.0/24 to any  keep state  label "USER_RULE: Default allow LAN to any rule"
# at the break! label "USER_RULE: Default allow LAN IPv6 to any rule"
pass  in  quick  on $LAN  proto tcp  from any to 127.0.0.1 port 8080 flags S/SA keep state  label "USER_RULE: NAT "
#pass  in  quick  on $OPT1 reply-to ( em2 192.168.210.20 )  proto tcp  from any to 192.168.1.100 port 53 flags S/SA keep state  label "USER_RULE: NAT "

# VPN Rules
pass out  on $WAN   proto udp from any to  any  port = 500  keep state label "IPsec:  any  - outbound isakmp"
pass in  on $WAN   proto udp from  any  to any port = 500  keep state label "IPsec:  any  - inbound isakmp"
pass out  on $WAN   proto udp from any to  any  port = 4500  keep state label "IPsec:  any  - outbound nat-t"
pass in  on $WAN   proto udp from  any  to any port = 4500  keep state label "IPsec:  any  - inbound nat-t"
pass out  on $WAN   proto esp from any to  any   keep state label "IPsec:  any  - outbound esp proto"
pass in  on $WAN   proto esp from  any  to any  keep state label "IPsec:  any  - inbound esp proto"

anchor "tftp-proxy/*"
